#!/bin/sh
# vim: set ts=4:
set -eu

readonly DEFAULT_MASK='255.255.255.0'

# Prints address (a.b.c.1) of the default gateway for the given IPv4 address.
# This is used for ETH0 interface when ETH0_GATEWAY is not provided.
gen_gateway_from_ipv4() {
	local ip="$1"

	echo "$(echo $ip | cut -d. -f1-3).1"
}

# Prints name of the context managed interface for the given MAC address.
# The name is in upper case and used as a prefix for variables that defines
# this interface. Returns empty string if doesn't exist.
context_dev_by_mac() {
	local mac="$1"

	env | sed -En "s/^(ETH[0-9]+)_MAC=$mac/\1/p"
}

# Generates and prints netifrc configuration variables for the specified
# network interface.
#
# $1: Device name of the interface (e.g. eth0, eth1).
# $2: Context name of the interface, i.e. variable prefix (e.g. ETH0, ETH1).
gen_iface_conf() {
	local dev="$1"
	local prefix="$2"

	local ip4="$(getval "$prefix"_IP)"
	local ip6="$(getval "$prefix"_IPV6)"
	local gw6="$(getval "$prefix"_GATEWAY6)"
	local dns_servers="$(getval "$prefix"_DNS)"
	local routes=''
	local config=''

	if [ "$ip4" ]; then
		config="$ip4 netmask $(getval "$prefix"_MASK "$DEFAULT_MASK")"

		local gw4="$(getval "$prefix"_GATEWAY)"
		if [ -z "$gw4" ] && [ "$prefix" = 'ETH0' ]; then
			gw4="$(gen_gateway_from_ipv4 "$ip4")"
		fi
		routes="default via $gw4"
	fi

	if [ "$ip6" ] && [ "$gw6" ]; then
		config="$config $ip6"
		routes="$routes default via $gw6"
	fi

	config="${config:-dhcp}"  # fallback to DHCP

	echo "config_$dev=\"$config\""
	[ -z "${routes:-}" ] || echo "routes_$dev=\"$routes\""
	[ -z "$dns_servers" ] || echo "dns_servers_$dev=\"$dns_servers\""
}

# Generates and prints netifrc configuration variables for all the
# contextualized network interfaces.
gen_network_conf() {
	local dev mac prefix

	for dev in $(ls /sys/class/net); do
		mac="$(cat /sys/class/net/$dev/address)" 2>/dev/null || continue
		prefix="$(context_dev_by_mac "$mac")"

		if [ "$prefix" ]; then
			gen_iface_conf "$dev" "$prefix"
			echo ''
		fi
	done
}


#-------------------------------- Main -------------------------------

. "$(dirname "$(readlink -f "$0")")/utils.sh"

if ! yesno "${NETWORK:-}"; then
	exit 0
fi

config="$(gen_network_conf)"
managed_devs=$(printf "$config" | sed -En 's/^config_([^=]+)=.*/\1/p')

update_config '/etc/conf.d/net' "$(readlink -f $0)" "$config"

for dev in $managed_devs; do
	ln -sf /etc/init.d/net.lo "/etc/init.d/net.$dev"
	/etc/init.d/net.$dev restart || true
done
